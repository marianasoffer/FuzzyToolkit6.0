package cluster.implement.fuzzy;

/* improved cmeas with Gustvave kerson method
 * Gustafson–Kessel Algorithm
Gustafson and Kessel (Gustafson and Kessel, 1979) extended the standard fuzzy cmeans
algorithm by employing an adaptive distance norm, in order to detect clusters
of different geometrical shapes in one data set. Each cluster has its own norm-inducing
matrix Ai, which yields the following inner-product norm:
 */
import com.sun.org.apache.bcel.internal.generic.RETURN;

import cluster.*;
import dataStruct.*;
import clusterUtil.*;
import distance.*;

public class GKCmeans extends FuzzyC{

	public double epsilon=1; //la diferencia entre iteraciones de funcion objetivo
							//cuando es menor que epsilon termina, convergio
	public double A[][];//en principio no uso asumo todos los clusters iguales
	public double[][] cluCovMat;
	public double []p; //no lo uso pero es volumen de cada cluster
	//seteo todos en uno y ya
	
	public GKCmeans(int numClus,DoubleDataset ds,double m){
		super(numClus,ds);
		this.m=m;
		cluCovMat=new double[nFields][nFields];//matriz de covarianza
		A=new double[nFields][nFields];
		maxIter=20;
	}	

	double sumPert(int j){
		double acum=0;
		for (int i=0;i<nItems;i++)
			acum+=Math.pow(u[i][j],m);
		return acum;
	}

	//obtengo la sumatoria total para calcularel nuevo centroide del cluster j 
	//segun las ponderaciones de los items
	double[] sumIndivPond(int jClu){
		double[] veAcum=new double[nFields];
		double[] veAct=new double[nFields];

		for (int i=0;i<nFields;i++)
			veAcum[i]=0;
		for (int i=0;i<nItems;i++)
			for (int j=0;j<nFields;j++){
				double a = ds.dataset[i][j];
				double c = u[i][jClu];
				double b =Math.pow(c,m);
				veAct[j]=b*a;
				veAcum[j]+=veAct[j];
			}
		return veAcum;
		}	


	double[] calc1Centroide(int j){
		double[] sum1=sumIndivPond(j);
		double sum2=sumPert(j);
		for (int i=0;i<nFields;i++)
			sum1[i]=sum1[i]/sum2;
		return sum1;
	}

	void calcularCentroides(){
		for (int j=0;j<numClu;j++)
			centroids[j]=calc1Centroide(j);
	}

	//----------------------------------	

	 	void calcCovMat(int cluN){
	 		double down=0;
	 		double mult=0;
	 		double[] item= new double[nFields];
	 		double[] centr= new double[nFields];
	 		double[] dist=new double[nFields];
	 		double[][] mTmp=new double[nFields][nFields];

	 		centr=centroids[cluN].clone();
	 		for (int i=0;i<nFields;i++)
		 		for (int j=0;j<nFields;j++)
		 			cluCovMat[i][j]=0;
	 		for (int i=0;i<nItems;i++){
	 			item=ds.dataset[i].clone();
	 			dist=ClusterMath.diferencia(item,centr);
	 			double[][] m1=new double[1][dist.length];
	 			double[][] m2=new double[dist.length][1];
	 			for(int z=0;z<dist.length;z++){
	 				m1[0][z]=dist[z];
	 				m2[z][0]=dist[z];
	 			}
	 			mTmp=ClusterMath.multMat(m2, m1);
	 			mult=Math.pow(u[i][cluN],m);
	 			
	 			for (int k=0;k<nFields;k++)
	 				for (int l=0;l<nFields;l++)
			 			mTmp[k][l]=mTmp[k][l]*mult;
	 			for (int k=0;k<nFields;k++)
	 				for (int l=0;l<nFields;l++)
	 					cluCovMat[k][l]+=mTmp[k][l];
	 			}
	 		down=0;
	 		for (int j=0;j<nItems;j++)
	 			down=down+Math.pow(u[j][cluN],m);
	 		if (down==0)
	 			down=1;
	 		for (int k=0;k<nFields;k++)
		 		for (int l=0;l<nFields;l++)
		 			cluCovMat[k][l]=cluCovMat[k][l]/down;
	 	}
	 	
 		public void calcMata(){
	 		double[][] invF=new double[nFields][nFields];
	 		double dete=ClusterMath.determinant(cluCovMat);
	 		if (dete==0)
	 			return;
	 		double dets=Math.abs(dete);
	 		double detp= Math.pow(dets,1.0/nItems);
	 		invF=ClusterMath.inverseMat(cluCovMat);
 		for (int i=0;i<nFields;i++)
		 		for (int j=0;j<nFields;j++)
		 			invF[i][j]=invF[i][j]*detp;
	 		A=invF.clone();
 		}

	 	double CentItemDist(int centN,int itN){
	 		double tot=0;
	 		double[] dif=ClusterMath.diferencia(ds.dataset[itN],centroids[centN]);
	 		calcCovMat(centN);
	 		calcMata();
	 		double[] tmp=ClusterMath.multVecMat(dif,A);
	 		tot=ClusterMath.mulTranspVecNum(tmp, dif);
	 		return Math.abs(tot);
	 	}
		double evalDist(int elementoI, int centroideJ, int centroide){
			double di1;
			double di2;
	   		di1=CentItemDist(centroideJ,elementoI);
	   		di2=CentItemDist(centroide,elementoI);
	   		if (di2==0) return 0;
			return di1/di2;
		}

	 	
		double calCovDist(int centroideJ, int elementoI){
			double acum=0.0;
			for (int centroide=0;centroide<numClu;centroide++){
				double a = evalDist(elementoI, centroideJ, centroide);
				double pot=1.0*(2/(m-1));
				acum+=Math.pow(a,pot);
			}
			if (acum<=0)
				return 0;
			return 1.0/acum;
		}
	 	
		void calcularMatrizPertenencia(){
			double[][] uTmp=new double[nItems][numClu];
			for (int i=0;i<nItems;i++){
				for (int j=0;j<numClu;j++){
					//calculo matriz de cov del cluster j
					uTmp[i][j]=calCovDist(j,i);
				}
			}
			u=uTmp.clone();
		}

//-------------------------------------
		double evaluarDistancia(int elementoI, int centroideJ, int centroide){
			double di1;
			double di2;
	   		di1=ClusterMath.norma(ClusterMath.diferencia(ds.dataset[elementoI], centroids[centroideJ]));
	   		di2=ClusterMath.norma(ClusterMath.diferencia(ds.dataset[elementoI], centroids[centroide]));
			return di1/di2;
		}
		

		double calcularPertenenciaElemento(int elementoI, int centroideJ){
			double acum=0;
			for (int centroide=0;centroide<numClu;centroide++){
				double a = evaluarDistancia(elementoI, centroideJ, centroide);
				double pot=1.0*(2/(m-1));
				acum+=Math.pow(a,pot);
			}
			return acum;
		}

		void calcularMatrizPertenenciaInicial(){
			for (int i=0;i<nItems;i++){
				for (int j=0;j<numClu;j++){
					double pert=calcularPertenenciaElemento(i,j);
						u[i][j]=1.0/pert;
				}
			}
			//parche para distancia 0
			for (int i=0;i<nItems;i++){
				int cant0=0;
				for (int j=0;j<numClu;j++){
					if (u[i][j]==0)
						cant0++;
				}
				int subi=-1;
				if (cant0==numClu-1){
					for (int j=0;j<numClu;j++){
						if (u[i][j]!=0)
							subi=j;
					}
				u[i][subi]=1;
				}
			}
		}

		
		public ResultF processClusters(){
			int iter=0;
			initCentroidsRand();
			calcularMatrizPertenenciaInicial();//para que u no este vacio
			while(iter<maxIter){
				calcularMatrizPertenencia();
				calcularCentroides();
				iter++;
			}
			cluAssign=assCluCentroids(centroids);
			assCluU(numClu);
			xieIndex=getXieIndex();
			return resulta(cluAssign,centroids,u);			
		}	
/*
 * not using
 * 
		public void initCentroidStat(){
			for(int i=0;i<numClu;i++)
				centroids[i]=ds.dataset[i].clone();
			//maxIter=10;
		}

 */
		
}
