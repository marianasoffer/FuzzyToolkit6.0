package cluster.implement.hard;
import distance.*;
import clusterUtil.*;

import cluster.*;
import dataStruct.*;
import distance.*;
import java.util.*;

//Standard k-means
public class KMeans extends HardC{
	public KMeans(int numClu,DoubleDataset ds){
		super(numClu,ds);
	}		
	
      //recalculo los centroides	
	double[][] recalcCentroids(){

		double[][] centt= new double[numClu][nFields];
		int[] totInst= new int[numClu];

		for(int i=0;i<ds.dataset.length;i++)
		{
			int clun=cluAssign[i];
			//sumo los vectores al clu correspond en centt;
			double[] mirow=ds.dataset[i].clone();
			//sumo la row y dpes sumo 1 a la cant de inst en el cluster;
			for(int m=0;m<nFields;m++)
				centt[clun][m]+=mirow[m];
			totInst[clun]++;
			}			
		//divido por la cantidad de instancias del cluster para tener el prom
		for(int i=0;i<numClu;i++)
			for(int j=0;j<nFields;j++)
				centt[i][j]=centt[i][j]/totInst[i];
	return centt;
	}


public	Result processClusters(){

		initCentroidsRand();
		cluAssign=assItemAClu(centroids);
		int iter=0;
		while(iter<maxIter){
			centroids=recalcCentroids();
			cluAssign=assItemAClu(centroids);
			iter++;
		}
		calcCluPert();//porcentaje de instancias en cada cluster
		interCluD=interCluDist(centroids);
		intraCluD=intraCluDist(cluAssign,centroids);	
		return resulta(cluAssign,centroids,cluPerc);			
	}	



}